/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.34
 * Generated at: 2020-05-11 15:30:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.net.*;
import java.io.*;
import java.util.*;
import java.text.*;
import javax.servlet.*;
import javax.servlet.http.*;
import org.json.*;
import org.rocksdb.*;
import org.rocksdb.util.*;
import code.*;

public final class search_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("org.rocksdb");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("java.net");
    _jspx_imports_packages.add("code");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("java.io");
    _jspx_imports_packages.add("org.json");
    _jspx_imports_packages.add("org.rocksdb.util");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html lang=\"en\">\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n");
      out.write("    <link rel=\"stylesheet\" href=\"skeleton.css\">\n");
      out.write("    <title>Document</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("   <!--  <div style=\"position:absolute; top:10%; left:10%; \"> -->\n");
      out.write("   <div style=\"margin: auto; width: 80%; padding: 10px;\">\n");
      out.write("        <h5>Search Results:</h5>\n");
      out.write("        <br>\n");
      out.write("        ");

            String s = request.getParameter("txtname");
        	int numResults = Integer.parseInt(request.getParameter("numresults"));
            String[] words = s.split(" ");
            ArrayList<String> words_phrases = new ArrayList<String>();
            int index=0;
            for (int i=0; i<words.length; i++) {
                if (words[i].charAt(0)=='"'){
                    String phrase = "";
                    if (words[i].charAt(words[i].length()-1)=='"'){
                        phrase = words[i].substring(1, words[i].length()-1);
                        words_phrases.add(phrase);
                        continue;
                    }
                    phrase = words[i].substring(1);
                    for (int j=i+1; j<words.length; j++){
                        int length = words[j].length();
                        if (words[j].charAt(length-1)=='"'){
                            phrase+=" " + words[j].substring(0, length-1);
                            i = j;
                            break;
                        }else{
                            phrase+=" " + words[j];
                        }
                    }
                    words_phrases.add(phrase);
                }else{
                    words_phrases.add(words[i]);
                }
            }
/*             for (String w : words_phrases) {
                out.println(w + "<br>");
            } */
            
            
            /* String dbPath = "/Users/raymondcheng/Documents/HKUST/Year 2/2020 Spring/COMP 4321/Project/COMP4321_project/apache-tomcat-9.0.34/webapps/ROOT/DB";
    	    File directory = new File(dbPath);
    	    if (directory.isDirectory()) {
    	    	String[] files = directory.list();
    	    	if (directory.length() > 0) {
    	    		System.out.println("The directory " + directory.getPath() + " is not empty");
    	    	} else {
    	    		System.out.println("The directory " + directory.getPath() + " is empty");
    	    	    Indexer in = new Indexer("http://www.cse.ust.hk", 30);
    	    	    Database.printAll();
    	    	}
    	    } */
    	    
    		Vector<String> queries = new Vector<String>();
    		for (String w : words_phrases) 
    			queries.add(w);
    		try {
    			List<Map.Entry<String, Double>> search_results = SearchEngine.search(queries, numResults);
    	        Vector<String> results = new Vector<String>();
    	        Vector<Double> scores = new Vector<Double>();
    	        for(Map.Entry<String, Double> entry : search_results){
    	            results.add(entry.getKey());
    	            /* out.println("score: " + entry.getValue()); */
    	            scores.add(entry.getValue());
    	        }
    	        for (int i=0; i<results.size(); i++) {
    				String[] output = SearchEngine.pageId_to_pageInfo(results.get(i), scores.get(i));
    				String score = output[0];
    				String title = output[1];
    				String URL = output[2];
    				String lastModDay = output[3];
    				String sizeOfPage = output[4];
    				String topWords = output[5];
    				String parentLinks = output[6].replaceAll("\n","<br>");
    				String childLinks = output[7].replaceAll("\n","<br>");
    				
    				out.println("<div class=\"row\">");
    				out.println("<div class=\"three columns\">");
    				out.println("<b>Score: </b>" + score);
    				out.println("</div>");
    				out.println("<div class=\"nine columns\">");
    				out.println("<b>Title: </b><a href=\"" + URL + "\">"+ title + "</a><br>"); 
    				out.println("<b>URL: </b><a href=\"" + URL + "\">"+ URL + "</a><br>");
    				out.println("<b>Last modification date: </b>" + lastModDay + ", <b>size of page: </b>" + sizeOfPage + "<br>");
    				out.println("<b>Top frequent words and their frequency: </b>" + topWords + "<br>");
    				out.println("<b>Parent Links: </b><br>" + parentLinks);
    				out.println("<b>Child Links: </b><br>" + childLinks + "<br>");
    				out.println("</div>");
    				out.println("</div>");
    			}
    		} catch (RocksDBException e) {
    			// TODO Auto-generated catch block
    			e.printStackTrace();
    		}
            
        
      out.write("\n");
      out.write("<!--         <div class=\"row\">\n");
      out.write("\t\t    <div class=\"three columns\">One</div>\n");
      out.write("\t\t    <div class=\"nine columns\">Eleven Eleven  Eleven Eleven Eleven Eleven  Eleven Eleven</div>\n");
      out.write("\t\t</div> -->\n");
      out.write("\t\t<a href=\"www.google.com\"></a>\n");
      out.write("    </div>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
